input {
  http {
    port => "5046"
    user => "mr-digital-billing"
    password => "same as used in creation of digital-billing-log-drain"
    codec => "plain"
    enable_metric => false
    id => "http_plain"
  }
  http {
    port => "5044"
    user => "mr-digital-billing"
    password => "same as used in creation of digital-billing-log-drain"
  }
}

filter {
  mutate {
    tag_on_failure => ["failed: APC mutate 1"]
    add_field => {
      "[@metadata][target_index]" => "logs-apc-%{+YYYY.MM}"
      "platform" => "APC"
    }
    remove_field => ["headers", "host", "port", "@timestamp", "@version"]
    rename => { "message" => "raw_message" }
  }
  grok {
    tag_on_failure => ["failed: APC grok 1"]
    match => { "raw_message" => "(?m)%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:syslog5424_timestamp}|-)(.*?\[)(?<component>[^]]*)(.*?app_name=\")?(?<service_name>[^\"]*)?(.*?instance_id=\")?(?<app_instance_id>[^\"]*)?(.*?space_name=\")?(?<environment>[^\"]*)?(.*?] )(?<main_message>.*)" }
  }
  date {
    tag_on_failure => ["failed: APC date 1"]
    match => ["syslog5424_timestamp", "ISO8601"]
  }
  mutate {
    tag_on_failure => ["failed: APC mutate 2"]
    remove_field => ["syslog5424_timestamp"]
    convert => {
      "syslog5424_pri" => "integer"
      "app_instance_id" => "integer"
    }
  }
  ruby { code => "
          severity = event.get('[syslog5424_pri]').to_i % 8
          case severity
          when -Float::INFINITY..3
            event.set('[log_level]', 'ERROR')
          when 4
            event.set('[log_level]', 'WARN')
          when 5..6
            event.set('[log_level]', 'INFO')
          when 7..Float::INFINITY
            event.set('[log_level]', 'DEBUG')
          end
          "
  }
  if [component] =~ /^RTR.*/ {
    grok{
      tag_on_failure => ["failed: APC grok 2"]
      match => { "main_message" => "(.*?%{TIMESTAMP_ISO8601:rtr_timestamp})(.*?\")(?<rtr_message>.*?\")%{SPACE}%{NUMBER:http_status}(.*?response_time:)?(?<response_seconds>[^ ]*)?" }
    }
    date {
      tag_on_failure => ["failed: APC date 2"]
      match => ["rtr_timestamp", "ISO8601"]
    }
    mutate {
      tag_on_failure => ["failed: APC mutate 3"]
      remove_field => ["rtr_timestamp"]
      rename => { "rtr_message" => "main_message" }
      convert => {
        "http_status" => "integer"
        "response_seconds" => "float"
      }
    }
  } else if [component] =~ /^APP.*/ {
    if [main_message] =~ /^{.*}/ {
      json { # this JSON happens to contain "@timestamp", therefore the current @timestamp is correctly overwritten
        tag_on_failure => ["failed: APC json 1"]
        source => "main_message"
      }
    }
    mutate {
      tag_on_failure => ["failed: APC mutate 4"]
      remove_field => ["json_msg", "@version", "level_value"]
      rename => { "logger_name" => "java_fqdn" }
      rename => { "message" => "main_message" }
      rename => { "thread_name" => "thread_name" }
      rename => { "stack_trace" => "stack_trace" }
    }
    if [level] =~ /[^-]/ {
      mutate {
        tag_on_failure => ["failed: APC mutate 5"]
        rename => { "level" => "log_level" }
      }
    }
  } else if [component] =~ /^API.*/ and [main_message] =~ /payload:/ {
    grok{
      tag_on_failure => ["failed: APC grok 3"]
      match => { "main_message" => "(.*?reason\"=>\")?(?<api_reason>[^\"]*)?(.*?exit_description\"=>\")?(?<api_exit_description>[^\"]*)?" }
    }
    if [api_exit_description] =~ /[\S]/ {
      mutate {
        tag_on_failure => ["failed: APC mutate 6"]
        rename => { "api_exit_description" => "main_message" }
      }
    }
    if [api_reason] =~ /.*CRASH.*/ {
      mutate {
        tag_on_failure => ["failed: APC mutate 7"]
        update => { "log_level" => "ERROR" }
      }
    }
  } else if [component] =~ /^STG.*/ {
    grok{
      tag_on_failure => ["failed: APC grok 4"]
      match => { "raw_message" => "(?m)<%{NONNEGINT}>%{NONNEGINT} +(?:%{TIMESTAMP_ISO8601}|-)([^.]*.[^.]*.)(?<stg_service_name>[^ ]*)" }
    }
    mutate {
      tag_on_failure => ["failed: APC mutate 8"]
      rename => { "stg_service_name" => "service_name" }
    }
  }
  mutate {
    tag_on_failure => ["failed: APC mutate 9"]
    rename => { "main_message" => "message" }
    remove_field => ["syslog5424_pri", "syslog5424_ver"]
  }
}

output {
  elasticsearch {
    hosts => ["https://fe454b7e16b844338e3a9d91d775f663.elasticsearch.cs.acme.com"]
    user => "logstash_system_username_FROM_Elasticsearch_Service_Key"
    password => "logstash_system_password_FROM_Elasticsearch_Service_Key"
    index => "%{[@metadata][target_index]}"
    action => "create"
    manage_template => false
    template_name => "logs-apc-%{+YYYY.MM}"
  }
}